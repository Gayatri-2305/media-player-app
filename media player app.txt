<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Android Media Player</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Roboto', sans-serif;
        }

        body {
            background: linear-gradient(135deg, #121212, #1E1E1E);
            color: #FFFFFF;
            height: 100vh;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .player-container {
            max-width: 450px;
            width: 100%;
            margin: auto;
            background: #212121;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            overflow: hidden;
            position: relative;
        }

        .header {
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(0, 0, 0, 0.2);
        }

        .header h1 {
            font-size: 18px;
            font-weight: 500;
        }

        .header .menu-btn {
            background: none;
            border: none;
            color: #FFFFFF;
            font-size: 20px;
            cursor: pointer;
        }

        .album-art {
            width: 100%;
            height: 300px;
            background: #333;
            position: relative;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .album-art img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .album-art .overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.3);
        }

        .song-info {
            padding: 20px;
            text-align: center;
        }

        .song-info h2 {
            font-size: 22px;
            margin-bottom: 5px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .song-info p {
            font-size: 16px;
            color: #B3B3B3;
        }

        .progress-container {
            padding: 0 20px;
            margin-bottom: 20px;
        }

        .progress-bar {
            height: 4px;
            width: 100%;
            background: #4D4D4D;
            border-radius: 2px;
            cursor: pointer;
        }

        .progress {
            height: 100%;
            background: #1DB954;
            border-radius: 2px;
            width: 0%;
            position: relative;
        }

        .progress::after {
            content: '';
            position: absolute;
            right: -5px;
            top: 50%;
            transform: translateY(-50%);
            width: 10px;
            height: 10px;
            background: #FFFFFF;
            border-radius: 50%;
            opacity: 0;
            transition: opacity 0.2s;
        }

        .progress-bar:hover .progress::after {
            opacity: 1;
        }

        .time-info {
            display: flex;
            justify-content: space-between;
            margin-top: 5px;
            font-size: 12px;
            color: #B3B3B3;
        }

        .controls {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 0 20px 20px;
            gap: 30px;
        }

        .controls button {
            background: none;
            border: none;
            color: #FFFFFF;
            font-size: 24px;
            cursor: pointer;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: background 0.2s;
        }

        .controls button:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .controls .play-btn {
            background: #1DB954;
            width: 60px;
            height: 60px;
            font-size: 30px;
        }

        .controls .play-btn:hover {
            background: #1ED760;
            transform: scale(1.05);
        }

        .playlist {
            background: #181818;
            max-height: 0;
            overflow-y: auto;
            transition: max-height 0.3s ease-out;
        }

        .playlist.active {
            max-height: 300px;
        }

        .playlist-item {
            padding: 15px 20px;
            display: flex;
            align-items: center;
            gap: 15px;
            cursor: pointer;
            transition: background 0.2s;
        }

        .playlist-item:hover {
            background: rgba(255, 255, 255, 0.05);
        }

        .playlist-item.active {
            background: rgba(29, 185, 84, 0.1);
        }

        .playlist-item img {
            width: 40px;
            height: 40px;
            object-fit: cover;
            border-radius: 5px;
        }

        .playlist-item-info {
            flex: 1;
        }

        .playlist-item-info h3 {
            font-size: 16px;
            margin-bottom: 3px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .playlist-item-info p {
            font-size: 12px;
            color: #B3B3B3;
        }

        .playlist-item-duration {
            font-size: 12px;
            color: #B3B3B3;
        }

        /* Animation for album art */
        @keyframes rotate {
            from {
                transform: rotate(0deg);
            }
            to {
                transform: rotate(360deg);
            }
        }

        .playing .album-art img {
            animation: rotate 20s linear infinite;
        }

        /* Responsive adjustments */
        @media (max-width: 480px) {
            .player-container {
                border-radius: 0;
                height: 100vh;
            }
        }
    </style>
</head>
<body>
    <div class="player-container">
        <div class="header">
            <h1>Music Player</h1>
            <button class="menu-btn" id="playlist-toggle">☰</button>
        </div>

        <div class="album-art">
            <img src="https://source.unsplash.com/random/600x600/?music,album" alt="Album Art">
            <div class="overlay"></div>
        </div>

        <div class="song-info">
            <h2 id="song-title">Song Title</h2>
            <p id="song-artist">Artist Name</p>
        </div>

        <div class="progress-container">
            <div class="progress-bar" id="progress-bar">
                <div class="progress" id="progress"></div>
            </div>
            <div class="time-info">
                <span id="current-time">0:00</span>
                <span id="duration">3:30</span>
            </div>
        </div>

        <div class="controls">
            <button id="prev-btn">⏮</button>
            <button id="play-btn" class="play-btn">▶</button>
            <button id="next-btn">⏭</button>
        </div>

        <div class="playlist" id="playlist">
            <!-- Playlist items will be added dynamically -->
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Sample playlist data
            const playlist = [
                {
                    title: "Blinding Lights",
                    artist: "The Weeknd",
                    duration: "3:20",
                    cover: "https://source.unsplash.com/random/300x300/?theweeknd"
                },
                {
                    title: "Save Your Tears",
                    artist: "The Weeknd",
                    duration: "3:35",
                    cover: "https://source.unsplash.com/random/300x300/?pop"
                },
                {
                    title: "Levitating",
                    artist: "Dua Lipa",
                    duration: "3:23",
                    cover: "https://source.unsplash.com/random/300x300/?dualipa"
                },
                {
                    title: "Don't Start Now",
                    artist: "Dua Lipa",
                    duration: "3:03",
                    cover: "https://source.unsplash.com/random/300x300/?disco"
                },
                {
                    title: "Watermelon Sugar",
                    artist: "Harry Styles",
                    duration: "2:54",
                    cover: "https://source.unsplash.com/random/300x300/?harrystyles"
                },
                {
                    title: "As It Was",
                    artist: "Harry Styles",
                    duration: "2:47",
                    cover: "https://source.unsplash.com/random/300x300/?retro"
                }
            ];

            // DOM elements
            const songTitle = document.getElementById('song-title');
            const songArtist = document.getElementById('song-artist');
            const albumArt = document.querySelector('.album-art img');
            const progressBar = document.getElementById('progress-bar');
            const progress = document.getElementById('progress');
            const currentTimeEl = document.getElementById('current-time');
            const durationEl = document.getElementById('duration');
            const playBtn = document.getElementById('play-btn');
            const prevBtn = document.getElementById('prev-btn');
            const nextBtn = document.getElementById('next-btn');
            const playlistEl = document.getElementById('playlist');
            const playlistToggle = document.getElementById('playlist-toggle');
            const playerContainer = document.querySelector('.player-container');

            // Player state
            let currentSongIndex = 0;
            let isPlaying = false;
            let audio = new Audio();
            let progressInterval;

            // Initialize playlist
            function initPlaylist() {
                playlistEl.innerHTML = '';
                playlist.forEach((song, index) => {
                    const playlistItem = document.createElement('div');
                    playlistItem.className = 'playlist-item';
                    if (index === currentSongIndex) {
                        playlistItem.classList.add('active');
                    }
                    playlistItem.innerHTML = `
                        <img src="${song.cover}" alt="${song.title}">
                        <div class="playlist-item-info">
                            <h3>${song.title}</h3>
                            <p>${song.artist}</p>
                        </div>
                        <div class="playlist-item-duration">${song.duration}</div>
                    `;
                    playlistItem.addEventListener('click', () => {
                        loadSong(index);
                        playSong();
                    });
                    playlistEl.appendChild(playlistItem);
                });
            }

            // Load song
            function loadSong(index) {
                currentSongIndex = index;
                const song = playlist[index];
                
                songTitle.textContent = song.title;
                songArtist.textContent = song.artist;
                albumArt.src = song.cover;
                durationEl.textContent = song.duration;
                
                // In a real app, you would set the audio source here
                // audio.src = song.audioUrl;
                
                // Update active song in playlist
                document.querySelectorAll('.playlist-item').forEach((item, i) => {
                    if (i === index) {
                        item.classList.add('active');
                    } else {
                        item.classList.remove('active');
                    }
                });
            }

            // Play song
            function playSong() {
                isPlaying = true;
                playerContainer.classList.add('playing');
                playBtn.textContent = '⏸';
                
                // In a real app, you would play the audio here
                // audio.play();
                
                // Simulate progress update
                clearInterval(progressInterval);
                let currentTime = 0;
                const duration = 210; // 3:30 in seconds
                
                progressInterval = setInterval(() => {
                    if (currentTime >= duration) {
                        nextSong();
                        return;
                    }
                    
                    currentTime++;
                    updateProgress(currentTime, duration);
                }, 1000);
            }

            // Pause song
            function pauseSong() {
                isPlaying = false;
                playerContainer.classList.remove('playing');
                playBtn.textContent = '▶';
                
                // In a real app, you would pause the audio here
                // audio.pause();
                
                clearInterval(progressInterval);
            }

            // Next song
            function nextSong() {
                currentSongIndex = (currentSongIndex + 1) % playlist.length;
                loadSong(currentSongIndex);
                if (isPlaying) {
                    playSong();
                }
            }

            // Previous song
            function prevSong() {
                currentSongIndex = (currentSongIndex - 1 + playlist.length) % playlist.length;
                loadSong(currentSongIndex);
                if (isPlaying) {
                    playSong();
                }
            }

            // Update progress bar
            function updateProgress(currentTime, duration) {
                const progressPercent = (currentTime / duration) * 100;
                progress.style.width = `${progressPercent}%`;
                
                // Format time as MM:SS
                const formatTime = (seconds) => {
                    const mins = Math.floor(seconds / 60);
                    const secs = Math.floor(seconds % 60);
                    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
                };
                
                currentTimeEl.textContent = formatTime(currentTime);
            }

            // Set progress on click
            progressBar.addEventListener('click', (e) => {
                const width = progressBar.clientWidth;
                const clickX = e.offsetX;
                const percent = clickX / width;
                
                // In a real app, you would set the audio currentTime
                // audio.currentTime = percent * audio.duration;
                
                // For simulation
                const duration = 210; // 3:30 in seconds
                const newTime = percent * duration;
                updateProgress(newTime, duration);
            });

            // Event listeners
            playBtn.addEventListener('click', () => {
                if (isPlaying) {
                    pauseSong();
                } else {
                    playSong();
                }
            });

            nextBtn.addEventListener('click', nextSong);
            prevBtn.addEventListener('click', prevSong);

            playlistToggle.addEventListener('click', () => {
                playlistEl.classList.toggle('active');
            });

            // Initialize
            initPlaylist();
            loadSong(0);
        });
    </script>
</body>
</html>
