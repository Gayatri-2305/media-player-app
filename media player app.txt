<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Media Player App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
        
        :root {
            --primary: #6366f1;
            --primary-dark: #4f46e5;
            --secondary: #f43f5e;
            --dark: #1e293b;
            --light: #f8fafc;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            transition: all 0.3s ease;
            overflow-x: hidden;
        }
        
        .dark {
            background-color: var(--dark);
            color: var(--light);
        }
        
        .light {
            background-color: var(--light);
            color: var(--dark);
        }
        
        .waveform {
            height: 60px;
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 4px;
        }
        
        .waveform-bar {
            background: linear-gradient(to top, var(--primary), var(--primary-dark));
            width: 4px;
            height: 20px;
            border-radius: 4px;
            animation: wave 1s infinite ease-in-out;
        }
        
        @keyframes wave {
            0%, 100% {
                height: 20px;
            }
            50% {
                height: 40px;
            }
        }
        
        .progress-container {
            height: 6px;
            background-color: #e2e8f0;
            border-radius: 3px;
            cursor: pointer;
        }
        
        .progress-bar {
            height: 100%;
            background: linear-gradient(to right, var(--primary), var(--secondary));
            border-radius: 3px;
            width: 0%;
            transition: width 0.1s linear;
        }
        
        .volume-slider {
            -webkit-appearance: none;
            width: 100px;
            height: 4px;
            background: #e2e8f0;
            border-radius: 2px;
            outline: none;
        }
        
        .volume-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 12px;
            height: 12px;
            background: var(--primary);
            border-radius: 50%;
            cursor: pointer;
        }
        
        .speed-btn {
            transition: all 0.2s ease;
        }
        
        .speed-btn:hover {
            transform: scale(1.1);
        }
        
        .playlist-item:hover {
            background-color: rgba(99, 102, 241, 0.1);
        }
        
        .playlist-item.active {
            background-color: rgba(99, 102, 241, 0.2);
            border-left: 4px solid var(--primary);
        }
        
        .fullscreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1000;
            background-color: var(--dark);
        }
        
        @media (max-width: 640px) {
            .player-container {
                width: 100%;
                border-radius: 0;
            }
        }
    </style>
</head>
<body class="light">
    <div class="min-h-screen flex flex-col items-center justify-center p-4">
        <div class="player-container bg-white dark:bg-slate-800 rounded-2xl shadow-xl overflow-hidden w-full max-w-md transition-all duration-300">
            <!-- Header -->
            <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-slate-700">
                <button id="theme-toggle" class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-slate-700 transition-colors">
                    <svg id="dark-icon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-yellow-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                    </svg>
                    <svg id="light-icon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-500 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                    </svg>
                </button>
                <h1 class="text-xl font-bold text-gray-800 dark:text-white">Media Player</h1>
                <button id="fullscreen-btn" class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-slate-700 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600 dark:text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4" />
                    </svg>
                </button>
            </div>
            
            <!-- Album Art -->
            <div class="relative">
                <img id="album-art" src="https://source.unsplash.com/random/400x400/?music" alt="Album Art" class="w-full aspect-square object-cover">
                <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-30">
                    <div class="waveform">
                        <div class="waveform-bar" style="animation-delay: 0s"></div>
                        <div class="waveform-bar" style="animation-delay: 0.1s"></div>
                        <div class="waveform-bar" style="animation-delay: 0.2s"></div>
                        <div class="waveform-bar" style="animation-delay: 0.3s"></div>
                        <div class="waveform-bar" style="animation-delay: 0.4s"></div>
                        <div class="waveform-bar" style="animation-delay: 0.5s"></div>
                        <div class="waveform-bar" style="animation-delay: 0.6s"></div>
                        <div class="waveform-bar" style="animation-delay: 0.7s"></div>
                    </div>
                </div>
            </div>
            
            <!-- Song Info -->
            <div class="p-4 text-center">
                <h2 id="song-title" class="text-xl font-bold text-gray-800 dark:text-white truncate">Song Title</h2>
                <p id="song-artist" class="text-gray-600 dark:text-gray-300">Artist Name</p>
            </div>
            
            <!-- Progress Bar -->
            <div class="px-4">
                <div class="progress-container">
                    <div class="progress-bar"></div>
                </div>
                <div class="flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1">
                    <span id="current-time">0:00</span>
                    <span id="duration">0:00</span>
                </div>
            </div>
            
            <!-- Controls -->
            <div class="flex justify-between items-center p-4">
                <button id="shuffle-btn" class="p-2 text-gray-600 dark:text-gray-300 hover:text-primary dark:hover:text-primary transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                </button>
                
                <button id="prev-btn" class="p-2 text-gray-600 dark:text-gray-300 hover:text-primary dark:hover:text-primary transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                </button>
                
                <button id="play-btn" class="p-3 bg-gradient-to-r from-indigo-500 to-pink-500 rounded-full text-white hover:shadow-lg transition-all">
                    <svg id="play-icon" xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <svg id="pause-icon" xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                </button>
                
                <button id="next-btn" class="p-2 text-gray-600 dark:text-gray-300 hover:text-primary dark:hover:text-primary transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                </button>
                
                <button id="repeat-btn" class="p-2 text-gray-600 dark:text-gray-300 hover:text-primary dark:hover:text-primary transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                </button>
            </div>
            
            <!-- Volume and Speed Controls -->
            <div class="flex justify-between items-center px-4 pb-4">
                <div class="flex items-center space-x-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600 dark:text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072M12 6a7.975 7.975 0 015.657 2.343m0 0a7.975 7.975 0 010 11.314m-11.314 0a7.975 7.975 0 010-11.314m0 0a7.975 7.975 0 015.657-2.343" />
                    </svg>
                    <input id="volume-slider" type="range" min="0" max="1" step="0.01" value="0.7" class="volume-slider">
                </div>
                
                <button id="speed-btn" class="speed-btn px-3 py-1 bg-gray-100 dark:bg-slate-700 rounded-full text-sm font-medium text-gray-800 dark:text-white">
                    1.0x
                </button>
            </div>
            
            <!-- Playlist -->
            <div class="border-t border-gray-200 dark:border-slate-700 max-h-60 overflow-y-auto">
                <div class="p-2 text-sm font-medium text-gray-500 dark:text-gray-400 sticky top-0 bg-white dark:bg-slate-800 border-b border-gray-200 dark:border-slate-700">
                    Playlist (3 songs)
                </div>
                <div id="playlist" class="divide-y divide-gray-200 dark:divide-slate-700">
                    <!-- Playlist items will be added here by JavaScript -->
                </div>
            </div>
        </div>
    </div>

    <script>
        // Sample playlist data
        const playlist = [
            {
                title: "Blinding Lights",
                artist: "The Weeknd",
                src: "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3",
                cover: "https://source.unsplash.com/random/300x300/?weeknd"
            },
            {
                title: "Save Your Tears",
                artist: "The Weeknd",
                src: "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3",
                cover: "https://source.unsplash.com/random/300x300/?tears"
            },
            {
                title: "Starboy",
                artist: "The Weeknd ft. Daft Punk",
                src: "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3",
                cover: "https://source.unsplash.com/random/300x300/?starboy"
            }
        ];

        // DOM Elements
        const audio = new Audio();
        const playBtn = document.getElementById('play-btn');
        const playIcon = document.getElementById('play-icon');
        const pauseIcon = document.getElementById('pause-icon');
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const shuffleBtn = document.getElementById('shuffle-btn');
        const repeatBtn = document.getElementById('repeat-btn');
        const progressContainer = document.querySelector('.progress-container');
        const progressBar = document.querySelector('.progress-bar');
        const currentTimeEl = document.getElementById('current-time');
        const durationEl = document.getElementById('duration');
        const songTitleEl = document.getElementById('song-title');
        const songArtistEl = document.getElementById('song-artist');
        const albumArtEl = document.getElementById('album-art');
        const playlistEl = document.getElementById('playlist');
        const volumeSlider = document.getElementById('volume-slider');
        const speedBtn = document.getElementById('speed-btn');
        const themeToggle = document.getElementById('theme-toggle');
        const darkIcon = document.getElementById('dark-icon');
        const lightIcon = document.getElementById('light-icon');
        const fullscreenBtn = document.getElementById('fullscreen-btn');
        const playerContainer = document.querySelector('.player-container');
        const body = document.body;

        // State variables
        let currentSongIndex = 0;
        let isPlaying = false;
        let isShuffled = false;
        let isRepeated = false;
        let playbackRates = [0.5, 0.75, 1.0, 1.25, 1.5, 2.0];
        let currentRateIndex = 2; // Default 1.0x

        // Initialize player
        function initPlayer() {
            loadSong(currentSongIndex);
            renderPlaylist();
            
            // Set initial volume
            audio.volume = volumeSlider.value;
            
            // Theme preference
            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            if (prefersDark) {
                body.classList.add('dark');
                darkIcon.classList.add('hidden');
                lightIcon.classList.remove('hidden');
            }
        }

        // Load song
        function loadSong(index) {
            const song = playlist[index];
            audio.src = song.src;
            songTitleEl.textContent = song.title;
            songArtistEl.textContent = song.artist;
            albumArtEl.src = song.cover;
            
            // Highlight current song in playlist
            const playlistItems = document.querySelectorAll('.playlist-item');
            playlistItems.forEach(item => item.classList.remove('active'));
            playlistItems[index].classList.add('active');
        }

        // Play song
        function playSong() {
            isPlaying = true;
            playIcon.classList.add('hidden');
            pauseIcon.classList.remove('hidden');
            audio.play();
            
            // Animate waveform bars
            const bars = document.querySelectorAll('.waveform-bar');
            bars.forEach(bar => {
                bar.style.animationPlayState = 'running';
            });
        }

        // Pause song
        function pauseSong() {
            isPlaying = false;
            playIcon.classList.remove('hidden');
            pauseIcon.classList.add('hidden');
            audio.pause();
            
            // Pause waveform animation
            const bars = document.querySelectorAll('.waveform-bar');
            bars.forEach(bar => {
                bar.style.animationPlayState = 'paused';
            });
        }

        // Previous song
        function prevSong() {
            currentSongIndex--;
            if (currentSongIndex < 0) {
                currentSongIndex = playlist.length - 1;
            }
            loadSong(currentSongIndex);
            if (isPlaying) {
                playSong();
            }
        }

        // Next song
        function nextSong() {
            if (isRepeated) {
                audio.currentTime = 0;
                playSong();
                return;
            }
            
            currentSongIndex++;
            if (currentSongIndex > playlist.length - 1) {
                currentSongIndex = 0;
            }
            loadSong(currentSongIndex);
            if (isPlaying) {
                playSong();
            }
        }

        // Update progress bar
        function updateProgress(e) {
            const { duration, currentTime } = e.srcElement;
            const progressPercent = (currentTime / duration) * 100;
            progressBar.style.width = `${progressPercent}%`;
            
            // Update time display
            currentTimeEl.textContent = formatTime(currentTime);
            if (duration) {
                durationEl.textContent = formatTime(duration);
            }
        }

        // Set progress
        function setProgress(e) {
            const width = this.clientWidth;
            const clickX = e.offsetX;
            const duration = audio.duration;
            audio.currentTime = (clickX / width) * duration;
        }

        // Format time
        function formatTime(seconds) {
            const mins = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
        }

        // Toggle shuffle
        function toggleShuffle() {
            isShuffled = !isShuffled;
            shuffleBtn.classList.toggle('text-primary', isShuffled);
            shuffleBtn.classList.toggle('dark:text-primary', isShuffled);
            
            if (isShuffled) {
                // Shuffle playlist
                const shuffled = [...playlist];
                for (let i = shuffled.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
                }
                playlist = shuffled;
                renderPlaylist();
            } else {
                // Restore original order
                playlist.sort((a, b) => a.title.localeCompare(b.title));
                renderPlaylist();
            }
        }

        // Toggle repeat
        function toggleRepeat() {
            isRepeated = !isRepeated;
            repeatBtn.classList.toggle('text-primary', isRepeated);
            repeatBtn.classList.toggle('dark:text-primary', isRepeated);
        }

        // Change playback speed
        function changeSpeed() {
            currentRateIndex = (currentRateIndex + 1) % playbackRates.length;
            const rate = playbackRates[currentRateIndex];
            audio.playbackRate = rate;
            speedBtn.textContent = `${rate}x`;
        }

        // Render playlist
        function renderPlaylist() {
            playlistEl.innerHTML = '';
            playlist.forEach((song, index) => {
                const playlistItem = document.createElement('div');
                playlistItem.className = `playlist-item flex items-center p-3 cursor-pointer ${index === currentSongIndex ? 'active' : ''}`;
                playlistItem.innerHTML = `
                    <img src="${song.cover}" alt="${song.title}" class="w-10 h-10 rounded-md object-cover mr-3">
                    <div class="flex-1">
                        <h3 class="text-sm font-medium text-gray-800 dark:text-white truncate">${song.title}</h3>
                        <p class="text-xs text-gray-500 dark:text-gray-400">${song.artist}</p>
                    </div>
                    <span class="text-xs text-gray-500 dark:text-gray-400">3:45</span>
                `;
                playlistItem.addEventListener('click', () => {
                    currentSongIndex = index;
                    loadSong(index);
                    playSong();
                });
                playlistEl.appendChild(playlistItem);
            });
        }

        // Toggle theme
        function toggleTheme() {
            body.classList.toggle('dark');
            body.classList.toggle('light');
            darkIcon.classList.toggle('hidden');
            lightIcon.classList.toggle('hidden');
        }

        // Toggle fullscreen
        function toggleFullscreen() {
            if (!document.fullscreenElement) {
                playerContainer.classList.add('fullscreen');
                document.documentElement.requestFullscreen();
            } else {
                if (document.exitFullscreen) {
                    playerContainer.classList.remove('fullscreen');
                    document.exitFullscreen();
                }
            }
        }

        // Event listeners
        playBtn.addEventListener('click', () => {
            isPlaying ? pauseSong() : playSong();
        });

        prevBtn.addEventListener('click', prevSong);
        nextBtn.addEventListener('click', nextSong);
        shuffleBtn.addEventListener('click', toggleShuffle);
        repeatBtn.addEventListener('click', toggleRepeat);
        speedBtn.addEventListener('click', changeSpeed);
        themeToggle.addEventListener('click', toggleTheme);
        fullscreenBtn.addEventListener('click', toggleFullscreen);

        audio.addEventListener('timeupdate', updateProgress);
        audio.addEventListener('ended', nextSong);
        audio.addEventListener('loadedmetadata', () => {
            durationEl.textContent = formatTime(audio.duration);
        });

        progressContainer.addEventListener('click', setProgress);

        volumeSlider.addEventListener('input', () => {
            audio.volume = volumeSlider.value;
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.code === 'Space') {
                e.preventDefault();
                isPlaying ? pauseSong() : playSong();
            } else if (e.code === 'ArrowRight') {
                audio.currentTime += 5;
            } else if (e.code === 'ArrowLeft') {
                audio.currentTime -= 5;
            } else if (e.code === 'ArrowUp') {
                audio.volume = Math.min(audio.volume + 0.1, 1);
                volumeSlider.value = audio.volume;
            } else if (e.code === 'ArrowDown') {
                audio.volume = Math.max(audio.volume - 0.1, 0);
                volumeSlider.value = audio.volume;
            }
        });

        // Initialize player
        initPlayer();
    </script>
</body>
</html>

